---
title: RMR 13 Muskox
layout: presentation
---
%section
  %h1 Muskox
%section
  %h1 Parser Generators!
%section
  %h1 Definite Input!
%section
  %h1 Security!
%section
  %h1 Why?
%section
  %h1 Rails Sec Issues
%section
  %h1 Weird Inputs
%section
  - code "xml" do
    :plain
      <yaml type="yaml">
        ----
          hi: eval_me
      </yaml>
%section
  - code "xml" do
    :plain
      <?xml version="1.0"?>
      <!DOCTYPE lolz [
       <!ENTITY lol "lol">
       <!ELEMENT lolz (#PCDATA)>
       <!ENTITY lol1 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">
       <!ENTITY lol2 "&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;">
       <!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">
       <!ENTITY lol4 "&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;">
       <!ENTITY lol5 "&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;">
       <!ENTITY lol6 "&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;">
       <!ENTITY lol7 "&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;">
       <!ENTITY lol8 "&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;">
       <!ENTITY lol9 "&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;">
      ]>
      <lolz>&lol9;</lolz>
%section
  %h1 Ha Ha. No!
%section
  %h1 Frameworks don't help with this
%section
  .bigger
    :rubycode
      # $ rake middleware
      # ...
      use ActionDispatch::ParamsParser
      # ...
      run YourApp::Application.routes
%section
  %h1 how to fix it?
%section
  %img{src: "/images/generate_all_the_parsers.jpg", style: "width:100%;height:100%"}
%section
  %h1 Muskox to the rescue
%section
  %h2 Muskox is a schema based Parser Generator
%section
  %h2 Give it a JSON Schema definition
  :rubycode
    extend Muskox::Extensions
        add_parser    :user,
          type:       :object,
          properties: {
            name:  { type: :string },
            email: { type: :string }
          }
%section
  %h1 And it will only allow valid strings to be parsed.
%section
  .bigger
    :rubycode
      MyParsers.parsers[:user].parse(
        %!{"name":"me", "email":"x@y.com"}!)
      # => {"name"=>"me", "email"=>"x@y.com"} 
%section
  .bigger
    :rubycode
      MyParsers.parsers[:user].parse(
        %!{"hash_dos1":1, "hash_dos2":1, "hash_dos3":1}!)
      # Muskox::ParserError: 
      #   Unexpected property: [hash_dos1] at root.
      #   Allowed properties: [name, email]
%section
  %h1 Based on Lang-Sec Ideas
%section
  %h1 Patch to the Postel Principle:
%section
  %blockquote.bigger
    Be definite about what you accept.(*)
%section
  %blockquote.bigger
    Treat inputs as a language, accept it with a matching computational power, generate its recognizer from its grammar.
%section
  %blockquote.bigger
    Treat input-handling computational power as privilege, and reduce it whenever possible.
%section
  :markdown
    # More Info
    * [github.com/baroquebobcat/muskox](https://github.com/baroquebobcat/muskox)
    * [langsec.org](http://langsec.org/)